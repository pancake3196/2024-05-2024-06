인바운드 - 요청
아웃바운드 - 응답

json :  데이터를 저장하기 위한 일종의 데이터 형식이다
웹 서버와 웹 애플리케이션의 데이터 교환 등으로 많이 이용되며 아래 json 형식처럼 사람과 기계도 분석하기 쉽다는 장점이 있다
작성법 :

    {
        "db상의 컬럼":"db에 들어간 값", /*데이터가 더 있을경우 ,를 입력 */
        "db상의 컬럼":"db에 들어간 값"
    }

예시
{
    "PROD_CD":"M123",                   //PROD_CD의 컬럼명이 M123인 데이터를 주거나 받는다(다른 데이터도 동일한 방법으로 작동)
    "PIBOJA_CD":"1234",
    "RIDER_ID":"GOGO00001",
    "RIDER_NM":"최원재",
    "CAR_NO":"서울종로가1234",
    "AGR_KEY":"sjfldjlkwjfkln112412",
    "AGR_YN":"1",
    "REQ_DT":"20240520",
    "SEND_GB":"04"
}

{
    "RIDER_ID":"GOGO00001",
    "RIDER_NM":"최원재",
    "CAR_NO":"서울종로가1234",
    "CONT_AGR_RESULT":"00",
    "RESULT_MSG":"처리 되었습니다.",
    "SEND_GB":"04"
}

OCCURS(발생빈도) : 데이터를 몇번 인바운드/아웃바운드 되었는지 확인
0 ~ 1 : 0회에서 1회 발생(선택값) (예 : 영문명, 해외코드같이 외국인만 작성할수 있는 경우)
1 ~ 1 : 1회 발생(필수값) (예 : 주민등록 번호, 이름 등 중요한 정보나 겹치면 안되는 데이터인 경우)
0 ~ n : 0회에서 n회 발생 (예 : 사고 여러번 난 경우 0~1처럼 외국인만 작성할수 있는 경우) 
1 ~ n : 1회에서 n회 발생 (예 : 한 사람이 사고가 여러번 난 경우 이름, 주민등록번호가 n회 등록되면 총 몇번 사고났는지 확인)

REMARK(설명) : 데이터의 상세설명
yyyy-mm-dd(날짜데이터 연/월/일 구분)
1:남/2:여(남자와 여자를 주민등록번호 뒷자리를 통하여 구분)
등 데이터가 고정일때 구분하기 힘드니 상세로 설명해주기 위함


char와 varchar/varchar2의 차이

char(고정형) : 문자이지만 길이가 고정이라 데이터를 적게 소모하면 소모한 만큼 빈 데이터가 됨
(char(10)일때 060302(6자)를 입력하면 입력 안한 공백(4자)는 공간낭비됨)
장점 : 데이터 접근 및 처리속도가 빠르다,일정한 메모리 사용
단점 : 실제 데이터가 길이보다 짧으면 짧은만큼 공백으로 소모되기에 데이터 공간낭비

varchar(가변형) : char와 동일하지만 데이터를 소모해도 소모한 만큼 길이가 줄어듦
varchar(30)일때 060302(6자)를 입력하면 입력한 6자에 맞춰 varchar의 길이가 6으로 줄어 데이터를 적게 소모할수 있음
장점 : 데이터가 길이보다 짧으면 짧은만큼 varchar의 길이도 짧아져 저장공간 절약
단점 : 가변길이로 인해 길이가 짧아지는 시간때문에 접근 및 처리속도가 char보다 느리다

char는 주로 주민등록 번호 등 고정된 데이터를 넣을때
varchar는 주로 이름 주소 등 값이 변경된 데이터를 넣을때

중요 : 한국 이름같은 경우 자음/모음이 따로따로 byte가 소모됨 (최준성 -> ㅊㅗㅣ ㅈㅜㄴ ㅅㅓㅇ 총 9자로 인식되어 char(3)에 작성하면 에러발생)